- raw: dnf install -y python2 python2-dnf libselinux-python

- selinux: state=disabled

- timezone: name=Asia/Tokyo

- hostname: name={{ HOSTNAME }}

- name: update packages
  become: true
  become_user: root
  raw: sudo dnf update -y

- dnf: name="{{ item }}" state=latest
  with_items:
    - git
    - zsh
    - emacs-nox
    - tmux
    - ncurses-devel
    - zlib-devel
    - vim

########
# sudo #
########

# vagrant (or its ansible_local provisioner) adds a file as below:
#
#     $ cat /etc/sudoers.d/vagrant-nopasswd
#     vagrant ALL=NOPASSWD: ALL
# 
# This allows "vagrant" performs sudo without password, 
# but not allows "vagrant" act as other users except root.
#
# To archieve that, the sudoers file should be like:
#
#     vagrant ALL=(ALL) NOPASSWD: ALL
#                 ^^^^^
#                 the missing part
#
# When you want to become a user other than root to execute something,
# ansible will translate it to:
#
#     sudo -H -S -n -u <non-root user> /bin/sh -c <your command>
#
# "-n" flag causes a failure because "vagrant" 
# cannot act as other user without password.
#
# I tried to add user "vagrant" to "wheel" group which 
# can sudo as other user without password.
#
# - name: allow 'wheel' group to sudo as other user without password
#   lineinfile:
#     dest: /etc/sudoers
#     state: present
#     regexp: '^%wheel'
#     line: '%wheel ALL=(ALL) NOPASSWD: ALL'
#
# - name: add vagrant to wheel group
#   user: name=vagrant groups=wheel append=yes
#
# This approach does not work because, vagrant will be not in wheel until
# logout & login. 
#
# So my current solution is 
# update the /etc/sudoers.d/vagrant-nopasswd file directly to:
#
#     vagrant ALL=(ALL) NOPASSWD: ALL
#
# This solution close coupled with vagrant's ansible_local though.
- name: allow 'vagrant' to sudo as other user without password
  lineinfile:
    dest: /etc/sudoers.d/vagrant-nopasswd
    state: present
    regexp: '^vagrant'
    line: 'vagrant ALL=(ALL) NOPASSWD: ALL'

###################
# add other users #
###################
- group: name={{ item.name }} state=present
  with_items: "{{ users }}"

- user: name={{ item.name }} group={{ item.name }} groups={{ item.groups }} shell=/bin/zsh password={{ item.password }}
  with_items: "{{ users }}"

- file: path=/home/{{ item.name }}/.ssh owner={{ item.name }} group={{ item.name }} state=directory mode='0700'
  with_items: "{{ users }}"

- name: deploy public key
  copy:
    src: "{{ item.public_key }}"
    dest: "/home/{{ item.name }}/.ssh/id_rsa.pub"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
    mode: "0644"
  with_items: "{{ users }}"

- name: deploy private key
  copy:
    src: "{{ item.private_key }}"
    dest: "/home/{{ item.name }}/.ssh/id_rsa"
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
    mode: "0600"
  with_items: "{{ users }}"

- authorized_key: user={{ item.name }} state=present key={{ lookup('file', item.public_key) }}
  with_items: "{{ users }}"